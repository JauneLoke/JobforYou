<?php

namespace App\Service;

use Symfony\Component\Filesystem\Filesystem;

class CompressImageService {

    private $fs;

    public function __construct(Filesystem $filesystem) {

        $this->fs = $filesystem;
    }

    public function compressImage($file, $pathTmp, $finalPath) {
        $errors = array();
        $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            
        if (filesize($file) <= '2097152') {
            try {
                $valid = false;
                // Get extension
                $extension = $file->guessExtension();
                // We load it on the server
                $file->move($pathTmp, $filename);

                if (in_array($extension, array('jpg', 'jpeg'))) {
                    // We apply the function with the path, file name
                    $img = imagecreatefromjpeg($pathTmp."/".$filename);
                    // Changing the file format
                    imagejpeg($img, $finalPath."/".$filename, 60);

                    $valid = true;
                }
                elseif (in_array($extension, array('gif'))) {
                    $img = imagecreatefromgif($pathTmp."/".$filename);
                    imagegif($img, $finalPath."/".$filename, 60);

                    $valid = true;
                }
                elseif (in_array($extension, array('png'))) {
                    $img = imagecreatefrompng($pathTmp."/".$filename);
                    imagepng($img, $finalPath."/".$filename, 5);

                    $valid = true;
                }
                elseif (in_array($extension, array('svg', 'bmp'))) {
                    $this->fs->copy($pathTmp.'/'.$filename, $finalPath.'/'.$filename);

                    $valid = true;
                }
                // Delete temporary file
                unlink($pathTmp.'/'. $filename);

                if ($valid = false) {
                    $errors[] = 'Le logo sélectionné n\'est pas un format valide ou le format à été modifié.';
                }

            } catch(FileException $e) {
                $errors[] = 'Une erreur est survenue lors de l\'enregistrement de votre logo : '.$e->getMessage();
            }
        }
        else {
            $errors[] = 'Le logo sélectionné doit être inférieur à 2Mo.';
        }
        
        return array(
            'errors' => $errors,
            'path' => ($this->fs->exists($finalPath."/".$filename) ? $finalPath."/".$filename : null)
        );
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}